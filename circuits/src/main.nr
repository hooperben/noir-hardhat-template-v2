use dep::noir_merkleroot;
use dep::std;

fn main(root: Field, leaf: Field, path_indices: [Field; 8], siblings: [Field; 8]) {
    let new_root = noir_merkleroot::compute_merkle_root(leaf, path_indices, siblings);
    assert(new_root == root);
}

#[test]
// this is the merkle test taken from the noir_merkleroot crate
fn test_compute_merkle_root() {
    let leaf = 13780856135824609486835123660791248959181113742546918549559321242116770234576;
    let path_indices = [0, 0, 1, 1, 0, 1, 1, 0];
    let siblings = [
        14520510218039433773459597944105601781578483631006408988284677481489650471896,
        16735405162150476769165535806199980191266151907719469609340290185602038249334,
        11607634630385916762103142687024023731847490136503700052557112073181947753651,
        1094530894963466396181348105151045704221228209480186211832907007839607915796,
        3284044843315180235425920080565507273212761221150458610158014968492963231945,
        4641050443441813769099735638332230934538706616831662404912867311564816535000,
        13308983921089595976695015024214414181663897095192147251475586735720084500210,
        12699940109500066053124654505808015855541980379149317240855603319465855478536,
    ];
    let root = noir_merkleroot::compute_merkle_root(leaf, path_indices, siblings);
    assert(root == 3507270469832926990571112645872386345557614009066375654691910206440851534809);
}

#[test]
fn test_initial_deposit() {
    let leaf = 20160893960736287353172201961072358781700170840597685064590079836896466519213;
    let path_indices = [0, 0, 0, 0, 0, 0, 0, 0];
    let siblings = [
        2302824601438971867720504068764828943238518492587325167295657880505909878424,
        19428256792156897017969362058752770906264853727489947143440068542948598352021,
        17853931724571662772332956499114693544766863748170224105043294543860231146517,
        16419682946791060480568640339254496257412952318236320492228438445644803673134,
        6116777126718568832700452889300770041780795070368971337256276093993272711696,
        12531059971824246620039700171281465527393705395806112443726758648373267687539,
        5843760801858568328900092091113985717963143128804361557752173071357002045108,
        1143408232830562712557958746360441814316737212400365135670159679457111832921,
    ];
    let root = noir_merkleroot::compute_merkle_root(leaf, path_indices, siblings);
    assert(root == 14691715986578578124196886834842542390222215612570999607106757387957373345619);
}
